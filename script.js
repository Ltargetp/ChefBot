// –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å
const translations = {
    ru: {
        search_placeholder: "–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤...",
        filter_all: "–í—Å–µ",
        filter_keto: "–ö–µ—Ç–æ",
        filter_breakfast: "–ó–∞–≤—Ç—Ä–∞–∫–∏",
        filter_salad: "–°–∞–ª–∞—Ç—ã",
        filter_main: "–û—Å–Ω–æ–≤–Ω—ã–µ",
        filter_dessert: "–î–µ—Å–µ—Ä—Ç—ã",
        no_recipes: "–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        ingredients: "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
        instructions: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
        buy_btn: "üõí –ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
        save_recipe_btn: "‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        calories_text: "–∫–∫–∞–ª"
    },
    en: {
        search_placeholder: "Search recipes...",
        filter_all: "All",
        filter_keto: "Keto",
        filter_breakfast: "Breakfasts",
        filter_salad: "Salads",
        filter_main: "Main courses",
        filter_dessert: "Desserts",
        no_recipes: "No recipes found",
        ingredients: "Ingredients",
        instructions: "Instructions",
        buy_btn: "üõí Buy products",
        save_recipe_btn: "‚≠ê Save",
        calories_text: "kcal"
    },
    de: {
        search_placeholder: "Rezepte suchen...",
        filter_all: "Alle",
        filter_keto: "Keto",
        filter_breakfast: "Fr√ºhst√ºcke",
        filter_salad: "Salate",
        filter_main: "Hauptgerichte",
        filter_dessert: "Desserts",
        no_recipes: "Keine Rezepte gefunden",
        ingredients: "Zutaten",
        instructions: "Anleitung",
        buy_btn: "üõí Produkte kaufen",
        save_recipe_btn: "‚≠ê Speichern",
        calories_text: "kcal"
    },
    fr: {
        search_placeholder: "Rechercher des recettes...",
        filter_all: "Tous",
        filter_keto: "K√©to",
        filter_breakfast: "Petits-d√©jeuners",
        filter_salad: "Salades",
        filter_main: "Plats principaux",
        filter_dessert: "Desserts",
        no_recipes: "Aucune recette trouv√©e",
        ingredients: "Ingr√©dients",
        instructions: "Instructions",
        buy_btn: "üõí Acheter produits",
        save_recipe_btn: "‚≠ê Sauvegarder",
        calories_text: "kcal"
    }
};

let currentLanguage = 'ru';
let currentFilter = 'all';
let currentSearch = '';
let recipesData = [];

function changeLanguage(lang) {
    currentLanguage = lang;
    updateTranslations();
    renderRecipes();
    updateActiveLanguageButton();
}

function updateTranslations() {
    document.querySelectorAll('[data-translate]').forEach(element => {
        const key = element.getAttribute('data-translate');
        if (translations[currentLanguage][key]) {
            if (element.placeholder) {
                element.placeholder = translations[currentLanguage][key];
            } else {
                element.textContent = translations[currentLanguage][key];
            }
        }
    });
}

function updateActiveLanguageButton() {
    document.querySelectorAll('.language-btn').forEach(btn => {
        if (btn.getAttribute('data-lang') === currentLanguage) {
            btn.classList.add('active');
        } else {
            btn.classList.remove('active');
        }
    });
}

// –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
function searchRecipes() {
    currentSearch = document.getElementById('search-input').value.toLowerCase();
    renderRecipes();
}

function filterRecipes(category) {
    currentFilter = category;
    renderRecipes();
    updateActiveFilterButton();
}

function updateActiveFilterButton() {
    document.querySelectorAll('.filter-btn').forEach(btn => {
        if (btn.getAttribute('data-filter') === currentFilter) {
            btn.classList.add('active');
        } else {
            btn.classList.remove('active');
        }
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
function renderRecipes() {
    const recipesContainer = document.getElementById('recipes-container');
    const filteredRecipes = getFilteredRecipes();
    
    if (filteredRecipes.length === 0) {
        recipesContainer.innerHTML = `<p class="no-recipes">${translations[currentLanguage].no_recipes}</p>`;
        return;
    }
    
    recipesContainer.innerHTML = filteredRecipes.map(recipe => `
        <div class="recipe-card">
            <div class="recipe-image">${recipe.icon}</div>
            <h3 class="recipe-title">${recipe.name[currentLanguage] || recipe.name.ru}</h3>
            <div class="recipe-meta">
                <span class="recipe-calories">${recipe.calories} ${translations[currentLanguage].calories_text}</span>
                <span class="recipe-category">${recipe.category}</span>
            </div>
            <p class="recipe-ingredients"><strong>${translations[currentLanguage].ingredients}:</strong> ${recipe.ingredients[currentLanguage] || recipe.ingredients.ru}</p>
            <div class="recipe-actions">
                <button class="action-btn buy-btn">${translations[currentLanguage].buy_btn}</button>
                <button class="action-btn save-btn">${translations[currentLanguage].save_recipe_btn}</button>
            </div>
        </div>
    `).join('');
}

function getFilteredRecipes() {
    return recipesData.filter(recipe => {
        const matchesCategory = currentFilter === 'all' || recipe.category === currentFilter;
        const matchesSearch = currentSearch === '' || 
            (recipe.name[currentLanguage] || recipe.name.ru).toLowerCase().includes(currentSearch) ||
            (recipe.ingredients[currentLanguage] || recipe.ingredients.ru).toLowerCase().includes(currentSearch);
        
        return matchesCategory && matchesSearch;
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
async function loadRecipes() {
    try {
        const response = await fetch('recipes.json');
        recipesData = await response.json();
        renderRecipes();
    } catch (error) {
        console.error('Error loading recipes:', error);
        document.getElementById('recipes-container').innerHTML = 
            `<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤</p>`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    loadRecipes();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    updateTranslations();
    updateActiveLanguageButton();
    updateActiveFilterButton();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —è–∑—ã–∫–∞
    document.querySelectorAll('.language-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            changeLanguage(this.getAttribute('data-lang'));
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ (live search)
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
        searchInput.addEventListener('input', function(e) {
            currentSearch = e.target.value.toLowerCase();
            renderRecipes();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            filterRecipes(this.getAttribute('data-filter'));
        });
    });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    window.savePreferences = function() {
        alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    };
});
